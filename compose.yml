name: worklab

x-logging: &logging
  logging:
    driver: loki
    options: # note: the ip is the ip we will assign later to loki in this file
      loki-url: "http://172.15.1.1:3100/loki/api/v1/push"
      mode: non-blocking
      max-buffer-size: 4m
      loki-batch-size: 400
      loki-retries: "3"

services:
  # inspired from https://theorangeone.net/posts/expose-docker-internal-dns/
  coredns:
    <<: *logging
    image: coredns/coredns
    container_name: "coredns"
    restart: unless-stopped
    command: -conf /etc/coredns/Corefile
    volumes:
      - ./config/coredns/:/etc/coredns/
    networks:
      coredns:
        ipv4_address: 172.16.1.1
      # required to resolve dns query to internet domain. e.g. google.com
      dmz:
  step-ca:
    <<: *logging
    container_name: "step-ca"
    image: smallstep/step-ca
    restart: unless-stopped
    dns: 172.16.1.1
    ports:
      - "9000:9000"
    environment:
      - "CONFIGPATH=/config/ca.json"
    volumes:
      - "./data/step-ca/:/home/step/"
      - "./config/step-ca/:/config/"
    networks:
      step-ca:
      coredns:
      dmz:
  traefik:
    <<: *logging
    image: "traefik:v3.3"
    container_name: "traefik"
    restart: unless-stopped
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.caserver=https://step-ca:9000/acme/acme/directory"
      - "--certificatesresolvers.myresolver.acme.email=postmaster@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/data/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./data/traefik/:/data/"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # TIPS: required in order to trust tls with https://step-ca:9000, must bootstrap docker host with step-ca see README.md
      - "/etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro" 
    depends_on:
      step-ca:
          condition: service_healthy
      vaultwarden:
          condition: service_healthy
    networks:
      dmz:
      coredns:
        ipv4_address: 172.16.1.2
      step-ca:
      traefik:
      atuin:
      vaultwarden:
      grafana:
      harness:
      homepage:
      memos:
  vaultwarden:
    <<: *logging
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    environment:
      DOMAIN: "https://vaultwarden.localhost"
    volumes:
      - ./data/vaultwarden/:/data/
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=vaultwarden"
      - "traefik.http.routers.vaultwarden.rule=Host(`vaultwarden.localhost`)"
      - "traefik.http.routers.vaultwarden.entrypoints=websecure"
      - "traefik.http.routers.vaultwarden.tls.certresolver=myresolver"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"
    networks:
      vaultwarden:
  harness:
    <<: *logging
    image: harness/harness
    container_name: harness
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - "GITNESS_ENCRYPTER_SECRET"
      - "GITNESS_PRINCIPAL_ADMIN_EMAIL"
      - "GITNESS_PRINCIPAL_ADMIN_PASSWORD"
      - "GITNESS_TRACE=true"
      - "GITNESS_CI_CONTAINER_NETWORKS=harness-ci"
      - "GITNESS_URL_CONTAINER=http://harness:3000"
      - "GITNESS_URL_REGISTRY=https://harness.localhost"
      - "GITNESS_URL_BASE=https://harness.localhost"
      - "GITNESS_USER_SIGNUP_ENABLED=false"
      - "GITNESS_PUBLIC_RESOURCE_CREATION_ENABLED=false"
      - "GITNESS_METRIC_ENABLED=false"
      - "GITNESS_CI_PLUGINS_ZIP_URL=/config/plugins-master.zip"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./data/harness/:/data/"
      - "./config/harness/:/config/"
      # TIPS: required in order to trust tls from the host. ex. proxy with tls rewrite
      - "/etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro" 
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=harness"
      - "traefik.http.routers.harness.rule=Host(`harness.localhost`)"
      - "traefik.http.routers.harness.entrypoints=websecure"
      - "traefik.http.routers.harness.tls.certresolver=myresolver"
      - "traefik.http.services.harness.loadbalancer.server.port=3000"
    networks:
      harness:
      harness-ci:
  homepage:
    <<: *logging
    image: ghcr.io/gethomepage/homepage:latest
    restart: unless-stopped
    container_name: homepage
    volumes:
      - ./config/homepage/:/app/config/ # Make sure your local config directory exists
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      HOMEPAGE_ALLOWED_HOSTS: homepage.localhost # required, may need port. See gethomepage.dev/installation/#homepage_allowed_hosts
      LOG_TARGETS: stdout
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homepage"
      - "traefik.http.routers.homepage.rule=Host(`homepage.localhost`)"
      - "traefik.http.routers.homepage.entrypoints=websecure"
      - "traefik.http.routers.homepage.tls.certresolver=myresolver"
      - "traefik.http.services.homepage.loadbalancer.server.port=3000"
    networks:
      homepage:
      prometheus:
  memos:
    <<: *logging
    image: neosmemo/memos:stable
    container_name: memos
    restart: unless-stopped
    user: "${UID}:${GID}"
    volumes:
      - ./data/memos/:/var/opt/memos:Z
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=memos"
      - "traefik.http.routers.memos.rule=Host(`memos.localhost`)"
      - "traefik.http.routers.memos.entrypoints=websecure"
      - "traefik.http.routers.memos.tls.certresolver=myresolver"
      - "traefik.http.services.memos.loadbalancer.server.port=5230"
    networks:
      memos:

  atuin:
    <<: *logging
    restart: unless-stopped
    image: ghcr.io/atuinsh/atuin:v18.5.0
    container_name: atuin
    command: server start
    volumes:
      - "./atuin/config:/config"
    links:
      - atuin-pg:db
    environment:
      ATUIN_HOST: "0.0.0.0"
      ATUIN_OPEN_REGISTRATION: "true"
      ATUIN_DB_URI: postgres://$ATUIN_DB_USERNAME:$ATUIN_DB_PASSWORD@db/$ATUIN_DB_NAME
      RUST_LOG: info,atuin_server=debug
    depends_on:
      - atuin-pg
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=atuin"
      - "traefik.http.routers.atuin.rule=Host(`atuin.localhost`)"
      - "traefik.http.routers.atuin.entrypoints=websecure"
      - "traefik.http.routers.atuin.tls.certresolver=myresolver"
      - "traefik.http.services.atuin.loadbalancer.server.port=8888"
    networks:
      atuin:
      atuin-pg:
      
  atuin-pg:
    <<: *logging
    image: postgres:14
    container_name: atuin-pg
    restart: unless-stopped
    volumes: # Don't remove permanent storage for index database files!
      - "./atuin/database:/var/lib/postgresql/data/"
    environment:
      POSTGRES_USER: ${ATUIN_DB_USERNAME}
      POSTGRES_PASSWORD: ${ATUIN_DB_PASSWORD}
      POSTGRES_DB: ${ATUIN_DB_NAME}
    networks:
      atuin-pg:

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    volumes: 
      - "/:/rootfs"
      - "/var/run:/var/run"
      - "/sys:/sys"
      - "/var/lib/docker/:/var/lib/docker"
      - "/dev/disk/:/dev/disk"
    privileged: true
    devices: 
      - "/dev/kmsg"
    networks:
      cadvisor:

  loki:
    container_name: loki
    restart: unless-stopped
    image: grafana/loki:latest
    volumes:
      - ./config/loki/loki-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      loki:
        ipv4_address: 172.15.1.1

  prometheus:
    container_name: prometheus
    restart: unless-stopped
    image: prom/prometheus:latest
    volumes: 
      - "./config/prometheus/config.yml:/etc/prometheus/prometheus.yml"
      - prom-data:/prometheus
    depends_on:
      cadvisor:
        condition: service_healthy
    networks:
      prometheus:
      cadvisor:
      traefik:
      coredns:

  grafana:
    container_name: grafana
    restart: unless-stopped
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - DS_PROMETHEUS=prometheus
    volumes: 
      - "grafana-data:/var/lib/grafana"
      - "./config/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml"
      - "./config/grafana/dashboard.json:/var/lib/grafana/dashboards/dashboard.json"
      - "./config/grafana/default.yaml:/etc/grafana/provisioning/dashboards/default.yaml"
    depends_on:
      - traefik
      - prometheus
      - loki
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=grafana"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    networks:
      grafana:
      prometheus:
      loki:
volumes:
  grafana-data:
  loki-data:
  prom-data:

networks:
  atuin:
    internal: true
  vaultwarden:
    internal: true
  grafana:
    internal: true
  harness:
    internal: true
  homepage:
    internal: true
  memos:
    internal: true
  step-ca:
    internal: true
  atuin-pg:
    internal: true
  prometheus:
    internal: true
  cadvisor:
    internal: true
  loki:
    internal: true
    ipam:
      config:
        - subnet: 172.15.0.0/16
          ip_range: 172.15.5.0/24
  traefik:
    internal: true
  coredns:
    internal: true
    ipam:
      config:
        - subnet: 172.16.0.0/16
          ip_range: 172.16.5.0/24
  dmz:
  harness-ci:
    name: harness-ci